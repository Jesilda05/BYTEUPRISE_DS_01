{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "FvJViVstiDwW"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "zaMcK0SuiDwZ",
        "outputId": "4c9dfa50-d3af-44db-e069-19526e981398"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<bound method NDFrame.head of           x1        x2  y\n",
              "0   0.486861  0.163756  0\n",
              "1   0.590718  0.429319  0\n",
              "2   0.537981  0.082374  0\n",
              "3   0.184411  0.717404  1\n",
              "4   0.825697  0.414670  1\n",
              "..       ...       ... ..\n",
              "95  0.497268  0.136202  0\n",
              "96  0.819918  0.334533  1\n",
              "97  0.328380  0.980288  1\n",
              "98  0.052043  0.489631  1\n",
              "99  0.886068  0.930075  0\n",
              "\n",
              "[100 rows x 3 columns]>"
            ]
          },
          "execution_count": 3,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "data=pd.read_csv('dataset.csv')\n",
        "data.head"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "zpGYO7L-iDwa",
        "outputId": "7934a1f1-8cb5-4790-d05e-ff7adb403f43"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.hist(data['x1'],edgecolor='black',color='green')\n",
        "plt.xlabel('x1')\n",
        "plt.ylabel('Frequency')\n",
        "plt.title('DISTRIBUTION OF x1')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "A9HkhIHQiDwb"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.4"
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}